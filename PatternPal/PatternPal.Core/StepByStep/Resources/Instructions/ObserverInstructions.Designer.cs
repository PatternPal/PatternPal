//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PatternPal.Core.StepByStep.Resources.Instructions {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ObserverInstructions {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ObserverInstructions() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("PatternPal.Core.StepByStep.Resources.Instructions.ObserverInstructions", typeof(ObserverInstructions).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This interface serves as the base for the Concrete Observers..
        /// </summary>
        internal static string Explanation1 {
            get {
                return ResourceManager.GetString("Explanation1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You should thus add the just created Concrete Observer to the observers list using the &apos;attach()&apos; method created in step 6..
        /// </summary>
        internal static string Explanation10 {
            get {
                return ResourceManager.GetString("Explanation10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You should thus update the just added Concrete Observer using the method created in step 7..
        /// </summary>
        internal static string Explanation11 {
            get {
                return ResourceManager.GetString("Explanation11", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This interface serves as the base fot the Concrete Subjects to which Concrete Observers can subscribe. The method here will in the Concrete Subjects be implemented as the `notify()` method..
        /// </summary>
        internal static string Explanation2 {
            get {
                return ResourceManager.GetString("Explanation2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is a Concrete Observer class which instances are updated if a Concrete Subject notifies them. .
        /// </summary>
        internal static string Explanation3 {
            get {
                return ResourceManager.GetString("Explanation3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is a Concrete Subject class which can notify the Concrete Observers if they are subscribed..
        /// </summary>
        internal static string Explanation4 {
            get {
                return ResourceManager.GetString("Explanation4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this list the Concrete Observers are stored which we want to update if the Concrete Subject notifies them. We can not check the type of the field thus make sure you do this correctly, it should look like: &quot;List&lt;Observer&gt; observers = new List&lt;Observer&gt;();&quot;. .
        /// </summary>
        internal static string Explanation5 {
            get {
                return ResourceManager.GetString("Explanation5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This method will be used to subscribe or unsubscribe Concrete Observer instances to the Concrete Subject. It could thus be a logical step to implement two methods with these requirements. One for attaching the Observer to the list and one to detach. .
        /// </summary>
        internal static string Explanation6 {
            get {
                return ResourceManager.GetString("Explanation6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This method will be used to notify the Concrete Observers in the observers list. For the implementation of this method it thus seems logical to loop through the observers list and notify each instance..
        /// </summary>
        internal static string Explanation7 {
            get {
                return ResourceManager.GetString("Explanation7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This field or property will be used to store the state in. With this state it can be determined that the observers should be notified. The method that comes with the field or property is then used to change the state. You can also choose to create a method with the state as parameter..
        /// </summary>
        internal static string Explanation8 {
            get {
                return ResourceManager.GetString("Explanation8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This will be the Client class which is used to control the Observer pattern. .
        /// </summary>
        internal static string Explanation9 {
            get {
                return ResourceManager.GetString("Explanation9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make an interface with an internal or public method. We refer to this interface as the Observer Interface..
        /// </summary>
        internal static string Step1 {
            get {
                return ResourceManager.GetString("Step1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the `attach()` method as described in step 6 in the Concrete Subject..
        /// </summary>
        internal static string Step10 {
            get {
                return ResourceManager.GetString("Step10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the &apos;update()` method as described in step 7 in the Concrete Subject..
        /// </summary>
        internal static string Step11 {
            get {
                return ResourceManager.GetString("Step11", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create an interface with an internal or public method that has a parameter with as type the Observer Interface. We will refer to this as the Subject Interface..
        /// </summary>
        internal static string Step2 {
            get {
                return ResourceManager.GetString("Step2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a class that implements the Observer Interface..
        /// </summary>
        internal static string Step3 {
            get {
                return ResourceManager.GetString("Step3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a class that implements the Subject interface. We will refer to this class as the Concrete Subject class..
        /// </summary>
        internal static string Step4 {
            get {
                return ResourceManager.GetString("Step4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a private field with as type a Observer list, we will refer to this field as the &apos;observers&apos;. .
        /// </summary>
        internal static string Step5 {
            get {
                return ResourceManager.GetString("Step5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a public or internal method, that has a parameter with as type Observer that uses the list `observers`. We will refer to this method as the &apos;attach()&apos; method..
        /// </summary>
        internal static string Step6 {
            get {
                return ResourceManager.GetString("Step6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a public method that uses the observers list and uses the `observers` list and uses the `update()` method of the `Observer Interface`. We will refer to this method as the &apos;update()&apos; method..
        /// </summary>
        internal static string Step7 {
            get {
                return ResourceManager.GetString("Step7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a private or protected field or property, which we will refer to as `mainState` and add a public or internal method that uses this field or property. Or add a public / internal method with a parameter. .
        /// </summary>
        internal static string Step8 {
            get {
                return ResourceManager.GetString("Step8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a class that creates a Concrete Subject instance and creates an Concrete Observer instance. .
        /// </summary>
        internal static string Step9 {
            get {
                return ResourceManager.GetString("Step9", resourceCulture);
            }
        }
    }
}
