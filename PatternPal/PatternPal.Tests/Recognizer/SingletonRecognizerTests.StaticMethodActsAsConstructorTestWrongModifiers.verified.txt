[
  {
    ChildrenCheckResults: [
      {
        ChildrenCheckResults: [
          {
            ChildrenCheckResults: [
              {
                ChildrenCheckResults: [
                  {
                    Correct: true,
                    FeedbackMessage: Modifiers correctly implemented.,
                    MatchedNode: MockClass2
                  },
                  {
                    Correct: false,
                    FeedbackMessage: The node MockClass2() does not have the protected modifier.,
                    MatchedNode: MockClass2
                  }
                ],
                CollectionKind: Any,
                NodeCheckCollectionWrapper: false,
                FeedbackMessage: Found the required checks for: MockClass2().,
                MatchedNode: MockClass2
              }
            ],
            NodeCheckCollectionWrapper: false,
            FeedbackMessage: Found constructor: MockClass2().,
            MatchedNode: MockClass2
          }
        ],
        CollectionKind: Any,
        NodeCheckCollectionWrapper: true,
        FeedbackMessage: 
      },
      {
        ChildrenCheckResults: [
          {
            ChildrenCheckResults: [
              {
                Correct: true,
                FeedbackMessage: Modifiers correctly implemented.,
                MatchedNode: _instance
              },
              {
                ChildrenCheckResults: [
                  {
                    Correct: true,
                    FeedbackMessage: Node 'MockClass2' has correct type,
                    MatchedNode: MockClass2
                  }
                ],
                CollectionKind: Any,
                NodeCheckCollectionWrapper: true,
                FeedbackMessage: Found node 'MockClass2',
                MatchedNode: MockClass2
              }
            ],
            NodeCheckCollectionWrapper: false,
            FeedbackMessage: Found field '_instance',
            MatchedNode: _instance
          }
        ],
        CollectionKind: Any,
        NodeCheckCollectionWrapper: true,
        FeedbackMessage: 
      },
      {
        ChildrenCheckResults: [
          {
            ChildrenCheckResults: [
              {
                Correct: false,
                FeedbackMessage: The node GetInstance() does not have the static modifier.,
                MatchedNode: GetInstance
              },
              {
                ChildrenCheckResults: [
                  {
                    Correct: true,
                    FeedbackMessage: Modifiers correctly implemented.,
                    MatchedNode: GetInstance
                  },
                  {
                    Correct: false,
                    FeedbackMessage: The node GetInstance() does not have the internal modifier.,
                    MatchedNode: GetInstance
                  }
                ],
                CollectionKind: Any,
                NodeCheckCollectionWrapper: false,
                FeedbackMessage: Found the required checks for: GetInstance().,
                MatchedNode: GetInstance
              },
              {
                ChildrenCheckResults: [
                  {
                    Correct: true,
                    FeedbackMessage: Node GetInstance() has a Uses relation with node MockClass2(),
                    Priority: Mid,
                    DependencyCount: 1,
                    MatchedNode: MockClass2
                  }
                ],
                CollectionKind: Any,
                NodeCheckCollectionWrapper: true,
                FeedbackMessage: Found Uses relations for GetInstance().,
                Priority: Mid,
                DependencyCount: 1,
                MatchedNode: GetInstance
              },
              {
                ChildrenCheckResults: [
                  {
                    Correct: true,
                    FeedbackMessage: Node GetInstance() has a Uses relation with node _instance,
                    Priority: Mid,
                    DependencyCount: 1,
                    MatchedNode: _instance
                  }
                ],
                CollectionKind: Any,
                NodeCheckCollectionWrapper: true,
                FeedbackMessage: Found Uses relations for GetInstance().,
                Priority: Mid,
                DependencyCount: 1,
                MatchedNode: GetInstance
              },
              {
                ChildrenCheckResults: [
                  {
                    Correct: true,
                    FeedbackMessage: Node 'MockClass2' has correct type,
                    MatchedNode: MockClass2
                  }
                ],
                CollectionKind: Any,
                NodeCheckCollectionWrapper: true,
                FeedbackMessage: Found node 'MockClass2',
                MatchedNode: MockClass2
              }
            ],
            NodeCheckCollectionWrapper: false,
            FeedbackMessage: Found method: GetInstance().,
            Priority: High,
            DependencyCount: 2,
            MatchedNode: GetInstance
          }
        ],
        CollectionKind: Any,
        NodeCheckCollectionWrapper: true,
        FeedbackMessage: ,
        Priority: High,
        DependencyCount: 2
      }
    ],
    NodeCheckCollectionWrapper: false,
    FeedbackMessage: Found class 'MockClass2',
    Priority: Low,
    DependencyCount: 2,
    MatchedNode: MockClass2
  },
  {
    ChildrenCheckResults: [
      {
        ChildrenCheckResults: [
          {
            ChildrenCheckResults: [
              {
                ChildrenCheckResults: [
                  {
                    Correct: true,
                    FeedbackMessage: Modifiers correctly implemented.,
                    MatchedNode: MockClass3
                  },
                  {
                    Correct: false,
                    FeedbackMessage: The node MockClass3() does not have the protected modifier.,
                    MatchedNode: MockClass3
                  }
                ],
                CollectionKind: Any,
                NodeCheckCollectionWrapper: false,
                FeedbackMessage: Found the required checks for: MockClass3().,
                MatchedNode: MockClass3
              }
            ],
            NodeCheckCollectionWrapper: false,
            FeedbackMessage: Found constructor: MockClass3().,
            MatchedNode: MockClass3
          }
        ],
        CollectionKind: Any,
        NodeCheckCollectionWrapper: true,
        FeedbackMessage: 
      },
      {
        ChildrenCheckResults: [
          {
            ChildrenCheckResults: [
              {
                Correct: true,
                FeedbackMessage: Modifiers correctly implemented.,
                MatchedNode: _instance
              },
              {
                ChildrenCheckResults: [
                  {
                    Correct: true,
                    FeedbackMessage: Node 'MockClass3' has correct type,
                    MatchedNode: MockClass3
                  }
                ],
                CollectionKind: Any,
                NodeCheckCollectionWrapper: true,
                FeedbackMessage: Found node 'MockClass3',
                MatchedNode: MockClass3
              }
            ],
            NodeCheckCollectionWrapper: false,
            FeedbackMessage: Found field '_instance',
            MatchedNode: _instance
          }
        ],
        CollectionKind: Any,
        NodeCheckCollectionWrapper: true,
        FeedbackMessage: 
      },
      {
        ChildrenCheckResults: [
          {
            ChildrenCheckResults: [
              {
                Correct: true,
                FeedbackMessage: Modifiers correctly implemented.,
                MatchedNode: GetInstance
              },
              {
                ChildrenCheckResults: [
                  {
                    Correct: false,
                    FeedbackMessage: The node GetInstance() does not have the public modifier.,
                    MatchedNode: GetInstance
                  },
                  {
                    Correct: false,
                    FeedbackMessage: The node GetInstance() does not have the internal modifier.,
                    MatchedNode: GetInstance
                  }
                ],
                CollectionKind: Any,
                NodeCheckCollectionWrapper: false,
                FeedbackMessage: Found the required checks for: GetInstance().,
                MatchedNode: GetInstance
              },
              {
                ChildrenCheckResults: [
                  {
                    Correct: false,
                    FeedbackMessage: No Uses relation found.,
                    Priority: Mid,
                    DependencyCount: 1,
                    MatchedNode: MockClass2
                  },
                  {
                    Correct: true,
                    FeedbackMessage: Node GetInstance() has a Uses relation with node MockClass3(),
                    Priority: Mid,
                    DependencyCount: 1,
                    MatchedNode: MockClass3
                  }
                ],
                CollectionKind: Any,
                NodeCheckCollectionWrapper: true,
                FeedbackMessage: Found Uses relations for GetInstance().,
                Priority: Mid,
                DependencyCount: 1,
                MatchedNode: GetInstance
              },
              {
                ChildrenCheckResults: [
                  {
                    Correct: false,
                    FeedbackMessage: No Uses relation found.,
                    Priority: Mid,
                    DependencyCount: 1,
                    MatchedNode: _instance
                  },
                  {
                    Correct: true,
                    FeedbackMessage: Node GetInstance() has a Uses relation with node _instance,
                    Priority: Mid,
                    DependencyCount: 1,
                    MatchedNode: _instance
                  }
                ],
                CollectionKind: Any,
                NodeCheckCollectionWrapper: true,
                FeedbackMessage: Found Uses relations for GetInstance().,
                Priority: Mid,
                DependencyCount: 1,
                MatchedNode: GetInstance
              },
              {
                ChildrenCheckResults: [
                  {
                    Correct: true,
                    FeedbackMessage: Node 'MockClass3' has correct type,
                    MatchedNode: MockClass3
                  }
                ],
                CollectionKind: Any,
                NodeCheckCollectionWrapper: true,
                FeedbackMessage: Found node 'MockClass3',
                MatchedNode: MockClass3
              }
            ],
            NodeCheckCollectionWrapper: false,
            FeedbackMessage: Found method: GetInstance().,
            Priority: High,
            DependencyCount: 2,
            MatchedNode: GetInstance
          }
        ],
        CollectionKind: Any,
        NodeCheckCollectionWrapper: true,
        FeedbackMessage: ,
        Priority: High,
        DependencyCount: 2
      }
    ],
    NodeCheckCollectionWrapper: false,
    FeedbackMessage: Found class 'MockClass3',
    Priority: Low,
    DependencyCount: 2,
    MatchedNode: MockClass3
  }
]