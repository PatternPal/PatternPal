syntax = "proto3";

option csharp_namespace = "PatternPal.LoggingServer";

package log;

// The greeting service definition.
service LogCollectorService {
  rpc Log (LogRequest) returns (LogResponse);
}

enum EventType
{
    ET_UNKNOWN = 0;
    ET_SESSION_START = 1;
    ET_SESSION_END = 2;
    ET_PROJECT_OPEN = 3;
    ET_PROJECT_CLOSE = 4;
    ET_FILE_CREATE = 5;
    ET_FILE_DELETE = 6;
    ET_FILE_OPEN = 7;
    ET_FILE_CLOSE = 8;
    ET_FILE_FOCUS = 9;
    ET_FILE_RENAME = 10;
    ET_FILE_COPY = 11;
    ET_FILE_EDIT = 12;
    ET_COMPILE = 13;
    ET_COMPILE_ERROR = 14;
    ET_COMPILE_WARNING = 15;
    ET_SUBMIT = 16;
    ET_RUN_PROGRAM = 17;
    ET_DEBUG_PROGRAM = 18;
    ET_RUN_TEST = 19;
    ET_DEBUG_TEST = 20;
    ET_RESOURCE_VIEW = 21;
    ET_INTERVENTION = 22;
    ET_CUSTOM = 23;
}

// Client configuration message to log to the server
message LogRequest {
  // The subject id is once set per client and should not be changed
  string subject_id = 1 ;
  // The tool instances are the tools that are currently running on the client (IDE, Compiler, Programming Language, etc. )
  string tool_instances = 2;

  // The event type is the type of event that is being logged
  EventType event_type = 3;

  // The session id is the id of the session that is currently running on the client. This is set per launch of the extension
  string session_id = 4;

  // The client timestamp is the timestamp of the event that is being logged on the client it is in ISO 8601 format. It should also contain the timezone
  string client_timestamp = 5;

  // The data is the data that is being logged. It is a byte array so that it can be serialized and deserialized to any type of data
  bytes data = 6;
}

// Confirmation message, should not contain information since the Log Function is a void function
message LogResponse {
  string message = 1; 
  // Simple message to return just to confirm that the server is up and running
}
