<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdapteeExtendsApter" xml:space="preserve">
    <value>Adaptee should Extends an the adapter</value>
  </data>
  <data name="AdapteeField" xml:space="preserve">
    <value>Adapter Field should have adaptee as type</value>
  </data>
  <data name="AdapteeIsUsed" xml:space="preserve">
    <value>Adaptee should be  used by adapter</value>
  </data>
  <data name="AdapterAdaptee" xml:space="preserve">
    <value>Has adaptee</value>
  </data>
  <data name="AdapterClass" xml:space="preserve">
    <value>Class adapter</value>
  </data>
  <data name="AdapterMethod" xml:space="preserve">
    <value>All Adapter methods should call adaptee</value>
  </data>
  <data name="AdapterMethodOverride" xml:space="preserve">
    <value>Adapter method should override or is ipmlemented</value>
  </data>
  <data name="AdapterMethodReturnType" xml:space="preserve">
    <value>Adapter method should return adaptee</value>
  </data>
  <data name="AdapterMethodUses" xml:space="preserve">
    <value>Adapter method uses adpatee</value>
  </data>
  <data name="AdapterParent" xml:space="preserve">
    <value>Adapter should be extended by or implemented by</value>
  </data>
  <data name="DecoratorComponent" xml:space="preserve">
    <value>Decorator component</value>
  </data>
  <data name="DecoratorComponentChilDecoratorComponentChild" xml:space="preserve">
    <value>Decorator component should be implemented or extended by one other class</value>
  </data>
  <data name="DecoratorComponentFieldType" xml:space="preserve">
    <value>Decorator component field should be {0}</value>
  </data>
  <data name="DecoratorComponentMethodAny" xml:space="preserve">
    <value>Decorator component should have at least one method</value>
  </data>
  <data name="DecoratorComponentMethodModifier" xml:space="preserve">
    <value>Decorator component should method should be public or protected</value>
  </data>
  <data name="DecoratorComponentMethodParameters" xml:space="preserve">
    <value>Decorator component method should have a parameter with type {0}</value>
  </data>
  <data name="DecoratorConcrete" xml:space="preserve">
    <value>Concrete decorator</value>
  </data>
  <data name="DecoratorConcreteMethodArguments" xml:space="preserve">
    <value>Concrete decorator method should use {0} and call its base</value>
  </data>
  <data name="DecoratorConcreteMethodModifier" xml:space="preserve">
    <value>Concrete decorator method should be public</value>
  </data>
  <data name="DecoratorConcreteMethodParameters" xml:space="preserve">
    <value>Concrete decorator method should have a parameter with type {0}</value>
  </data>
  <data name="DecoratorNodeChild" xml:space="preserve">
    <value>Decorator should be extended by a class</value>
  </data>
  <data name="DecoratorNodeModifier" xml:space="preserve">
    <value>Decorator should be abstract.</value>
  </data>
  <data name="DecoratorNodeParent" xml:space="preserve">
    <value>Decorator should extend or implement a class</value>
  </data>
  <data name="ObjectAdapter" xml:space="preserve">
    <value>Object adapter</value>
  </data>
  <data name="SingletonConstructor" xml:space="preserve">
    <value>Private constructor</value>
  </data>
  <data name="SingletonConstructorModifier" xml:space="preserve">
    <value>Singleton constructor should not be public.</value>
  </data>
  <data name="SingletonField" xml:space="preserve">
    <value>Has instance of itself</value>
  </data>
  <data name="SingletonFieldModifierPriv1ate" xml:space="preserve">
    <value>Singleton field should not be public.</value>
  </data>
  <data name="SingletonFieldModifierPrivate" xml:space="preserve">
    <value>Singleton field should not be public.</value>
  </data>
  <data name="SingletonFieldModifierStatic" xml:space="preserve">
    <value>Singleton field should be static.</value>
  </data>
  <data name="SingletonFieldType" xml:space="preserve">
    <value>Singleton field type should be {0}.</value>
  </data>
  <data name="SingletonMethod" xml:space="preserve">
    <value>Has GetInstance()</value>
  </data>
  <data name="SingletonMethodModifier" xml:space="preserve">
    <value>Singleton method should be public.</value>
  </data>
  <data name="SingletonMethodReturnCreationType" xml:space="preserve">
    <value>Singleton method should be able to return a new Singleton.</value>
  </data>
  <data name="SingletonMethodReturnType" xml:space="preserve">
    <value>Singleton method  shoudl return itself.</value>
  </data>
</root>