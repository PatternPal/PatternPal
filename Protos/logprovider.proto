syntax = "proto3";

package patternpal;

import "commonlog.proto";
option csharp_namespace = "PatternPal.Protos";

// Defines the API exposed by the PatternPal background service
service LogProviderService  {
    // Runs the recognizer(s) for a given file or project
    rpc LogEvent (LogEventRequest) returns (LogEventResponse);
}

// Input arguments for recognizer request
message LogEventRequest {

// Required columns 
patternpal.EventType event_type = 1;
string event_id = 2;
string subject_id = 3;
string tool_instances = 4;

// Optional columns
string client_timestamp = 5;
string experimental_condition = 6; 
string logging_error_id = 7;
string parent_event_id = 8;
string session_id = 9;
string project_id = 10;
string code_state_section = 11;
string compile_result = 12;
string compile_message_type = 13;
string compile_message_data = 14;
string source_location = 15;
string execution_id = 16;
patternpal.ExecutionResult execution_result = 17;
optional string recognizer_result = 18;
optional string recognizer_config = 19;
optional string file_path = 20;
optional string project_directory = 21;
string old_file_name = 22;
}

enum LogStatusCodes{
    LSC_UNKNOWN = 0;
    LSC_SUCCESS = 1;
    LSC_UNAVAILABLE = 2;
    LSC_REJECTED = 3;
    LSC_INVALID_ARGUMENTS=4;
    LSC_FAILURE=5;
}


message LogEventResponse {
    LogStatusCodes status = 1;
    string message = 2;
}