syntax = "proto3";

package patternpal;

import "common.proto";

option csharp_namespace = "PatternPal.Protos";

// The PatternPal step-by-step API exposed by the background service.
service StepByStepService {
    // Gets the instruction sets which are available for step-by-step mode.
    rpc GetInstructionSets (GetInstructionSetsRequest) returns (GetInstructionSetsResponse);

    // Gets the selected instructionset
    rpc GetInstructionSet (GetInstructionSetRequest) returns (GetInstructionSetResponse);

    // Gets a instruction with a given id.
    rpc GetInstructionById (GetInstructionByIdRequest) returns (GetInstructionByIdResponse);

    // Checks whether a instruction is implemented correctly.
    rpc CheckInstruction (CheckInstructionRequest) returns (CheckInstructionResponse);
}

// GetInstructionSets request message.
message GetInstructionSetsRequest { }

// GetInstructionSets response message.
message GetInstructionSetsResponse {
    // InstructionSets that the InstructionsCreator can make.
    repeated patternpal.Recognizer recognizers = 1;
}

// GetInstructionSet request message.
message GetInstructionSetRequest {
    // Name of the PatternPal
    patternpal.Recognizer recognizer = 1;
}

// GetInstructionSet response message.
message GetInstructionSetResponse {
    // The selected InstructionSet from the combobox.
    InstructionSet selected_instructionset = 1;
}

// An instruction set.
message InstructionSet {
    // Name of the set.
    string name = 1;

    // Number of instructions in the set.
    uint32 number_of_instructions = 2;
}

// GetInstructionById request message.
message GetInstructionByIdRequest {
    // Indexer to determine the current instruction
    uint32 instruction_number = 1;

    // Recognizer to obtain instruction with
    patternpal.Recognizer recognizers = 2;
}

// GetInstructionById response message.
message GetInstructionByIdResponse {
    // Instruction which was found.
    Instruction instruction = 1;
}

// An instruction.
message Instruction {
    // Title of the instruction.
    string title = 1;

    // Description of the instruction.
    string description = 2;
    
    // Key used to store the selected file.
    string file_id = 4;
}

// CheckInstruction request message.
message CheckInstructionRequest {
    // Id of the instruction to check, 0-based.
    int32 instruction_number = 1;

    // List of documents which should be included in the check.
    repeated string documents = 2;
    
    // Optional. The selected item in the file selector.
    string selected_item = 3;

    // The recognizer that needs to be used.
    patternpal.Recognizer recognizer = 4;
}
      
// CheckInstruction response message.
message CheckInstructionResponse {
    // Correctness of the check of the instruction.
    bool result = 1;

    // Detailed result of the check of the instruction.
    optional patternpal.RecognizeResult recognize_result = 2;
}