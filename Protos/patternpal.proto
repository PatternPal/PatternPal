syntax = "proto3";

package patternpal;

option csharp_namespace = "PatternPal.Protos";

// Defines the API exposed by the PatternPal background service.
service PatternPal {
    // Runs the recognizer(s) for a given file or project.
    rpc Recognize (RecognizeRequest) returns (stream RecognizerResult);
}

// Input arguments for recognizer request.
message RecognizeRequest {
    // Path of the file or project to analyze.
    oneof file_or_project {
        // Path of the file to analyze.
        string file = 1;
        // Path of the project to analyze.
        string project = 2;
    };
    // Recognizers to run.
    repeated Recognizer recognizers = 3;
}

// Result of the recognizer.
message RecognizerResult {
    // Pattern which was detected.
    string detected_pattern = 1;
    // Class which the pattern was detected on.
    string class_name = 2;
    Result result = 3;
}

// TODO CV: Proper naming and documentation.
message Result {
    int32 score = 1;
    repeated CheckResult results = 2;
}

message CheckResult {
    repeated CheckResult child_feedback = 1;
    FeedbackType feedback_type = 2;
    bool hidden = 3;
    double score = 4;
}

enum FeedbackType {
    UNKNOWN = 0;
    CORRECT = 1;
    SEMI_CORRECT = 2;
    INCORRECT = 3;
}

// Recognizers which can be run.
enum Recognizer {
    // All recognizers.
    ALL = 0;
    // Adapter.
    ADAPTER = 1;
    // Bridge.
    BRIDGE = 2;
    // Decorator.
    DECORATOR = 3;
    // Factory Method.
    FACTORY_METHOD = 4;
    // Observer.
    OBSERVER = 5;
    // Singleton.
    SINGLETON = 6;
    // State.
    STATE = 7;
    // Strategy.
    STRATEGY = 8;
}
