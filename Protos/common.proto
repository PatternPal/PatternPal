syntax = "proto3";

package patternpal;

option csharp_namespace = "PatternPal.Protos";

// Root result of a recognizer.
message RecognizeResult {
    // The recognizer which was used to obtain this result.
    Recognizer recognizer = 1;

    // General feedback about how well a pattern is implemented.
    string feedback = 2;

    // The percentage of results which are correct.
    int32 percentage_correct_results = 3;;

    // The results for the individual checks which make up the recognizer.
    repeated EntityResult entity_results = 4;
}

// Result of an Entity Check.
message EntityResult {
    // Name of the Entity check, for example: Singleton Class.
    string name = 1;

    // The MatchedNode of this result, in this case an Entity.
    MatchedNode matched_node = 2;

    // How well the requirement has been implemented.
    Correctness correctness = 3;

    // The percentage of requirements which are correct.
    int32 percentage_correct_requirements = 4;

    // The results of the requirements of this Entity check.
    repeated Result requirements = 5;
}

// Result of one specific check inside a recognizer.
message Result {
    // The requirement which belongs to the check of this result.
    string requirement = 1;

    // The MatchedNode of this result.
    MatchedNode matched_node = 2;

    // How well the requirement has been implemented.
    Correctness correctness = 3;
}

// How well a requirement has been implemented.
enum Correctness {
    // The default value.
    C_UNKNOWN = 0;

    // The requirement has been implemented correctly.
    C_CORRECT = 1;

    // The requirement has been partially implemented.
    C_PARTIALLY_CORRECT = 2;

    // The requirement has not been implemented.
    C_INCORRECT = 3;
}

// Node matched by a requirement.
message MatchedNode {
    //The name of the node.
    string name = 1;

    //The location of the node, used for interactivety in extension.
    string path = 2;

    //The specific start in the code file of this node.
    int32 start = 3;

    //The specific length in the code file of this node.
    int32 length = 4;

    // The kind of matched node.
    MatchedNodeKind kind = 5;

    // The kind of matched node.
    enum MatchedNodeKind {
        // The default value.
        MNK_UNKNOWN = 0;

        // Interface.
        MNK_INTERFACE = 1;

        // Class.
        MNK_CLASS = 2;

        // Constructor.
        MNK_CONSTRUCTOR = 3;

        // Field.
        MNK_FIELD = 4;

        // Method.
        MNK_METHOD = 5;

        // Property.
        MNK_PROPERTY = 6;
    }
}

// Recognizers which can be run.
enum Recognizer {
    // Not used. This is the default value required by the Protocol Buffer spec.
    RECOGNIZER_UNKNOWN = 0;

    // Recognizer for the Adapter pattern.
    RECOGNIZER_ADAPTER = 1;

    // Recognizer for the Bridge pattern.
    RECOGNIZER_BRIDGE = 2;

    // Recognizer for the Decorator pattern.
    RECOGNIZER_DECORATOR = 3;

    // Recognizer for the Factory Method pattern.
    RECOGNIZER_FACTORY_METHOD = 4;

    // Recognizer for the Observer pattern.
    RECOGNIZER_OBSERVER = 5;

    // Recognizer for the Singleton pattern.
    RECOGNIZER_SINGLETON = 6;

    // Recognizer for the State pattern.
    RECOGNIZER_STATE = 7;

    // Recognizer for the Strategy pattern.
    RECOGNIZER_STRATEGY = 8;
}
